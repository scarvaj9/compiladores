
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Nov 06 20:25:15 COT 2021
//----------------------------------------------------

package analizadorProyecto;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Nov 06 20:25:15 COT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\005\006\000\002\005" +
    "\005\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\005\000\002\021\005\000\002" +
    "\021\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\006\000\002\020\006\000\002\020\003" +
    "\000\002\022\005\000\002\025\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\005\000\002\015\011\000\002\026" +
    "\003\000\002\026\004\000\002\027\003\000\002\030\005" +
    "\000\002\030\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\005\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\005\000\002\017\003\000\002\017" +
    "\003\000\002\035\011\000\002\034\013\000\002\010\003" +
    "\000\002\010\004\000\002\007\003\000\002\006\005\000" +
    "\002\006\003\000\002\011\005\000\002\011\003\000\002" +
    "\012\005\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\005\000\002\016\014\000\002\004\003" +
    "\000\002\004\004\000\002\003\003\000\002\002\003\000" +
    "\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\016\005\001\002\000\004\002\204\001" +
    "\002\000\022\013\007\022\013\025\014\031\015\033\006" +
    "\034\010\035\011\036\016\001\002\000\006\004\061\013" +
    "\060\001\002\000\024\013\031\022\013\025\014\026\040" +
    "\031\015\033\006\034\010\035\011\036\016\001\002\000" +
    "\004\015\145\001\002\000\026\004\125\010\123\013\121" +
    "\022\013\025\014\031\015\033\006\034\010\035\011\036" +
    "\016\001\002\000\004\020\120\001\002\000\004\015\070" +
    "\001\002\000\006\004\061\013\060\001\002\000\006\004" +
    "\061\013\060\001\002\000\004\013\020\001\002\000\034" +
    "\005\ufffc\013\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\025\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\001\002\000\004\026\021\001\002\000\004\012\022\001" +
    "\002\000\004\040\023\001\002\000\006\012\024\013\026" +
    "\001\002\000\004\041\uffc5\001\002\000\004\041\027\001" +
    "\002\000\004\041\uffc4\001\002\000\004\012\030\001\002" +
    "\000\022\013\031\022\013\025\014\031\015\033\006\034" +
    "\010\035\011\036\016\001\002\000\004\026\040\001\002" +
    "\000\004\005\036\001\002\000\024\005\uffc6\013\uffc6\022" +
    "\uffc6\025\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\001\002\000\024\005\uffc8\013\031\022\013\025\014\031" +
    "\015\033\006\034\010\035\011\036\016\001\002\000\004" +
    "\005\uffc7\001\002\000\022\013\031\022\013\025\014\031" +
    "\015\033\006\034\010\035\011\036\016\001\002\000\034" +
    "\005\uffc9\013\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\025\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\001\002\000\012\012\042\013\050\015\046\037\047\001" +
    "\002\000\034\005\ufff7\013\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\025\ufff7\031\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\001\002\000\010\011\uffea\014\uffea\032\uffea" +
    "\001\002\000\010\011\uffeb\014\uffeb\032\uffeb\001\002\000" +
    "\004\032\055\001\002\000\010\011\053\014\uffed\032\uffed" +
    "\001\002\000\012\012\042\013\050\015\046\037\047\001" +
    "\002\000\010\011\uffe9\014\uffe9\032\uffe9\001\002\000\010" +
    "\011\uffe8\014\uffe8\032\uffe8\001\002\000\004\014\052\001" +
    "\002\000\010\011\uffe7\014\uffe7\032\uffe7\001\002\000\012" +
    "\012\042\013\050\015\046\037\047\001\002\000\010\011" +
    "\uffec\014\uffec\032\uffec\001\002\000\022\013\031\022\013" +
    "\025\014\031\015\033\006\034\010\035\011\036\016\001" +
    "\002\000\034\005\uffee\013\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\025\uffee\031\uffee\033\uffee\034\uffee\035" +
    "\uffee\036\uffee\001\002\000\034\005\ufffb\013\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\025\ufffb\031\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\001\002\000\004\032\064" +
    "\001\002\000\004\032\062\001\002\000\022\013\031\022" +
    "\013\025\014\031\015\033\006\034\010\035\011\036\016" +
    "\001\002\000\034\005\ufff5\013\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\025\ufff5\031\ufff5\033\ufff5\034\ufff5" +
    "\035\ufff5\036\ufff5\001\002\000\022\013\031\022\013\025" +
    "\014\031\015\033\006\034\010\035\011\036\016\001\002" +
    "\000\034\005\ufff6\013\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\025\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\001\002\000\034\005\ufff9\013\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\025\ufff9\031\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\001\002\000\034\005\ufffe\013" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\025\ufffe" +
    "\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\001\002\000" +
    "\010\012\072\013\077\015\076\001\002\000\012\011\uffdd" +
    "\014\uffdd\027\uffdd\030\uffdd\001\002\000\012\011\uffdc\014" +
    "\uffdc\027\uffdc\030\uffdc\001\002\000\006\014\uffe1\027\uffe1" +
    "\001\002\000\006\014\110\027\102\001\002\000\012\011" +
    "\105\014\uffdf\027\uffdf\030\104\001\002\000\010\012\072" +
    "\013\077\015\076\001\002\000\012\011\uffdb\014\uffdb\027" +
    "\uffdb\030\uffdb\001\002\000\006\014\101\027\102\001\002" +
    "\000\012\011\uffda\014\uffda\027\uffda\030\uffda\001\002\000" +
    "\010\012\072\013\077\015\076\001\002\000\006\014\uffe2" +
    "\027\uffe2\001\002\000\010\012\072\013\077\015\076\001" +
    "\002\000\010\012\072\013\077\015\076\001\002\000\012" +
    "\011\uffde\014\uffde\027\uffde\030\uffde\001\002\000\010\011" +
    "\105\014\uffe0\027\uffe0\001\002\000\004\024\111\001\002" +
    "\000\022\013\031\022\013\025\014\031\015\033\006\034" +
    "\010\035\011\036\016\001\002\000\024\013\uffe3\022\uffe3" +
    "\023\uffe3\025\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\001\002\000\024\013\031\022\013\023\uffe5\025\014" +
    "\031\015\033\006\034\010\035\011\036\016\001\002\000" +
    "\004\023\115\001\002\000\022\013\031\022\013\025\014" +
    "\031\015\033\006\034\010\035\011\036\016\001\002\000" +
    "\034\005\uffe6\013\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\025\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\001\002\000\004\023\uffe4\001\002\000\004\002\uffff" +
    "\001\002\000\010\007\136\026\040\032\135\001\002\000" +
    "\034\005\ufff8\013\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\025\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\001\002\000\006\007\131\032\130\001\002\000\034" +
    "\005\uffef\013\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\025\uffef\031\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\001\002\000\004\032\126\001\002\000\022\013\031\022" +
    "\013\025\014\031\015\033\006\034\010\035\011\036\016" +
    "\001\002\000\034\005\ufff3\013\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\025\ufff3\031\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\001\002\000\022\013\031\022\013\025" +
    "\014\031\015\033\006\034\010\035\011\036\016\001\002" +
    "\000\004\013\132\001\002\000\026\004\125\010\123\013" +
    "\121\022\013\025\014\031\015\033\006\034\010\035\011" +
    "\036\016\001\002\000\034\005\ufff1\013\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\001\002\000\034\005\ufff2\013" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2" +
    "\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\001\002\000" +
    "\022\013\031\022\013\025\014\031\015\033\006\034\010" +
    "\035\011\036\016\001\002\000\004\010\137\001\002\000" +
    "\026\004\125\010\123\013\121\022\013\025\014\031\015" +
    "\033\006\034\010\035\011\036\016\001\002\000\034\005" +
    "\ufff0\013\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\025\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\001" +
    "\002\000\034\005\ufff4\013\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\025\ufff4\031\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\001\002\000\034\005\uffd9\013\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9\031\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\001\002\000\034\005\ufffd" +
    "\013\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025" +
    "\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\001\002" +
    "\000\034\005\uffd8\013\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\025\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\001\002\000\010\012\150\013\154\015\153\001" +
    "\002\000\012\011\176\014\uffcf\027\uffcf\030\175\001\002" +
    "\000\006\014\uffd1\027\uffd1\001\002\000\012\011\uffcc\014" +
    "\uffcc\027\uffcc\030\uffcc\001\002\000\006\014\161\027\157" +
    "\001\002\000\012\011\uffcd\014\uffcd\027\uffcd\030\uffcd\001" +
    "\002\000\010\012\150\013\154\015\153\001\002\000\012" +
    "\011\uffcb\014\uffcb\027\uffcb\030\uffcb\001\002\000\006\014" +
    "\156\027\157\001\002\000\012\011\uffca\014\uffca\027\uffca" +
    "\030\uffca\001\002\000\010\012\150\013\154\015\153\001" +
    "\002\000\006\014\uffd2\027\uffd2\001\002\000\004\006\162" +
    "\001\002\000\022\013\031\022\013\025\014\031\015\033" +
    "\006\034\010\035\011\036\016\001\002\000\026\013\031" +
    "\017\uffd5\021\uffd5\022\013\025\014\031\015\033\006\034" +
    "\010\035\011\036\016\001\002\000\006\017\166\021\167" +
    "\001\002\000\026\013\uffd3\017\uffd3\021\uffd3\022\uffd3\025" +
    "\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\001\002" +
    "\000\022\013\031\022\013\025\014\031\015\033\006\034" +
    "\010\035\011\036\016\001\002\000\022\013\031\022\013" +
    "\025\014\031\015\033\006\034\010\035\011\036\016\001" +
    "\002\000\034\005\uffd7\013\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\025\uffd7\031\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\001\002\000\004\021\172\001\002\000\022" +
    "\013\031\022\013\025\014\031\015\033\006\034\010\035" +
    "\011\036\016\001\002\000\034\005\uffd6\013\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\031\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\001\002\000\006\017\uffd4" +
    "\021\uffd4\001\002\000\010\012\150\013\154\015\153\001" +
    "\002\000\010\012\150\013\154\015\153\001\002\000\012" +
    "\011\uffce\014\uffce\027\uffce\030\uffce\001\002\000\010\011" +
    "\176\014\uffd0\027\uffd0\001\002\000\004\020\202\001\002" +
    "\000\004\002\000\001\002\000\034\005\ufffa\013\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa\031\ufffa" +
    "\033\ufffa\034\ufffa\035\ufffa\036\ufffa\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\005\003\001\001\000\002\001\001\000" +
    "\004\014\011\001\001\000\004\021\202\001\001\000\004" +
    "\014\200\001\001\000\010\017\142\034\141\035\143\001" +
    "\001\000\006\014\123\020\121\001\001\000\002\001\001" +
    "\000\004\015\066\001\001\000\004\021\065\001\001\000" +
    "\004\021\056\001\001\000\004\016\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\033\004\031\014\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\033\004\034\014" +
    "\032\001\001\000\002\001\001\000\004\014\036\001\001" +
    "\000\002\001\001\000\012\022\040\023\044\024\042\025" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\044\024\042\025\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\053\001\001\000\002\001\001\000\004\014\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\062\001\001\000\002\001\001" +
    "\000\004\014\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\030\073\031\072\032\074" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\077\031\072\032\074\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\102" +
    "\032\074\033\070\001\001\000\002\001\001\000\006\032" +
    "\106\033\070\001\001\000\004\033\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\111\026\113\027\112\001\001\000\002\001\001\000\010" +
    "\014\111\026\116\027\112\001\001\000\002\001\001\000" +
    "\004\014\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\126\001\001\000\002\001\001\000\004\014\133\001" +
    "\001\000\002\001\001\000\006\014\123\020\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\140\001" +
    "\001\000\002\001\001\000\006\014\123\020\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\150\011\146" +
    "\012\145\013\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\154\011\146\012\145\013\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\157\012\145\013\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\162\010\163\014\164\001\001" +
    "\000\010\007\162\010\173\014\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\162\010\170\014\164" +
    "\001\001\000\004\014\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\177\013\151\001\001\000" +
    "\004\013\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errsin="";
    public void syntax_error (Symbol  x){
        errsin+="\nError Sintaxis en posición "+ (x.left+1) + "," + (x.right+1);
        throw new UnsupportedOperationException (errsin);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T2 ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T2 ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IN1 ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IN1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PROCE ::= IN1 PROCE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PROCE ::= IN1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROCE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CICLOPARA ::= id eq num hasta T2 paso num PROCE finpara SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOPARA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // T1 ::= pi PRO pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // T1 ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // T1 ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E1 ::= T1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E1 op T1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EA1 ::= E1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EA1 ::= E1 or E1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRO ::= EA1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRO ::= PRO ol EA1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IN ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IN",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INST ::= IN INST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENPAREJA ::= pi PRO pd enton INST sino INST finsi SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENPAREJA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SINPAREJA ::= pi PRO pd enton INST finsi SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINPAREJA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONDICIONAL ::= SINPAREJA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICIONAL ::= ENPAREJA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // T ::= pi EL pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // T ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E ::= E op T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EA ::= E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EA ::= E or E 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EL ::= EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EL ::= EL ol EA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // I ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IS ::= I IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IS ::= I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CICLOMIENTRAS ::= pi EL pd hacer IS finmien SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLOMIENTRAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TERMINO ::= pi Q pd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TERMINO ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TERMINO ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TERMINO ::= num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AUXILIAR ::= TERMINO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUXILIAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AUXILIAR ::= AUXILIAR op TERMINO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUXILIAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Q ::= AUXILIAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Q",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACIONES ::= Q p_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACIONES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESCRITURA ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESCRITURA ::= id coma cad ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESCRITURA ::= cad coma id ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESCRITURA ::= cad p_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESCRITURA ::= variables p_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESCRITURA ::= id p_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITURA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DL ::= variables p_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DL ::= id p_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= id eq OPERACIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= escri ESCRITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= leer DL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= tipoReal DL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= tipoEntero DL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= para CICLOPARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= si CONDICIONAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= mientras CICLOMIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= inicio SENTENCIA fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= inicio id SENTENCIA fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

